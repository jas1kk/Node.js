1. Чтобы запустить сервер вам нужно будет ввести эти команды:
1) cd server
2) npm install
3) npm start


authScript

Этот сценарий представляет собой клиентскую реализацию системы регистрации и входа пользователей в веб-приложение. 
Скрипт использует Node.js и JavaScript. Он выполняет следующие операции:

Он выбирает элементы на HTML-странице по их уникальным идентификаторам и присваивает им переменные: полное имя, логин,
поля ввода пароля для регистрации и поля ввода логина и пароля для входа в систему.

Он устанавливает URL-адрес сервера как BASE_URL и создает две функции, fetchData и postData, для обработки выборки данных и отправки данных на сервер соответственно.
Он создает функцию logOut для очистки данных пользователя из локального хранилища и перенаправления пользователя на индексную страницу.

Он создает функцию userRegistration для получения полного имени пользователя, логина и пароля и отправки запроса POST на сервер с полезными данными о пользователе.
Функция сначала проверяет, занят ли уже логин, и показывает предупреждение, если да.

Он создает функцию userLogin для получения логина и пароля пользователя, отправки POST-запроса на сервер для аутентификации пользователя и, в случае успеха, 
сохранения идентификатора пользователя в локальном хранилище и перенаправления пользователя на страницу ленты. Если аутентификация не удалась,
он показывает предупреждение.

Он создает функцию changeWindow для переключения между двумя формами, скрывая одну и показывая другую.

Он добавляет прослушиватели событий щелчка к кнопкам входа и регистрации для запуска соответствующих функций при нажатии.

--------------------------------------------------------------------------------------------------

feedScript

Этот скрипт представляет собой одностраничное веб-приложение, 
созданное с использованием Node.js. Сценарий начинается с условного оператора, который проверяет, 
хранится ли элемент «пользователь» в локальном хранилище. Если элемент отсутствует, пользователь перенаправляется на страницу index.html.

Далее скрипт определяет несколько функций, выполняющих разные задачи:

logOut: эта функция очищает локальное хранилище и перенаправляет пользователя обратно на страницу index.html.

fetchData: эта функция извлекает данные по указанному маршруту на сервере. Функция возвращает ответ в формате JSON.

postData: эта функция отправляет почтовый запрос по указанному маршруту на сервере, передавая полезную нагрузку данных.

loadAllPosts: эта функция извлекает данные сообщений и пользовательские данные, фильтрует данные сообщений на основе авторов, на которых подписан пользователь, 
а затем заполняет ленту сообщений отфильтрованными данными.

likePost: эта функция отправляет запрос на сервер, чтобы понравиться сообщению, и перезагружает ленту сообщений.

непохожий на сообщение: эта функция отправляет запрос на сервер, чтобы исключить сообщение из списка, и перезагружает ленту сообщений.

Наконец, скрипт вызывает функцию loadAllPosts для загрузки ленты сообщений при загрузке страницы.

--------------------------------------------------------------------------------------------------

profileScript

Этот скрипт представляет собой файл JavaScript, работающий в среде Node.js. Он предназначен для использования в качестве части веб-приложения,
в котором пользователь уже вошел в систему. 
Целью этого сценария является управление отображением данных пользователя на странице профиля приложения и предоставление функций для обновления информации профиля, создание постов,
и удаление постов.

В начале скрипт проверяет, хранится ли элемент «пользователь» в локальном хранилище. Если нет, пользователь перенаправляется на страницу index.html.

Затем сценарий объявляет некоторые константы, представляющие элементы HTML в пользовательском интерфейсе. Они используются для чтения и записи данных в пользовательский интерфейс, 
таких как имя автора,
о поле автора и блоке сообщений.

Сценарий включает в себя несколько функций, которые обрабатывают различные аспекты приложения:

fetchData — это служебная функция, которая делает запрос GET к URL-адресу для получения данных.
postData — это служебная функция, которая делает POST-запрос к URL-адресу для отправки данных.
logOut — это функция, которая очищает локальное хранилище и перенаправляет пользователя обратно на индексную страницу.
fetchProfileData извлекает информацию профиля вошедшего в систему пользователя с сервера и отображает ее в пользовательском интерфейсе.
userUpdateData отправляет обновленную версию информации профиля пользователя на сервер.
fetchUsersPosts извлекает список сообщений, созданных пользователем, и отображает их в пользовательском интерфейсе.
Сценарий также включает прослушиватели событий для кнопок и модальных диалогов, таких как кнопка изменения информации об авторе, 
кнопка создания публикации и кнопка обновления публикации. Эти кнопки запускают обновления профиля пользователя и сообщений,
или открывать и закрывать модальные диалоги для создания и обновления сообщений.

В целом, этот сценарий функционирует как интерфейсная логика JavaScript для страницы профиля пользователя веб-приложения.

--------------------------------------------------------------------------------------------------

usersScript

Этот сценарий представляет собой внешний файл JavaScript для функции отслеживания пользователя в веб-приложении. 
Он начинается с проверки наличия «пользователя» в локальном хранилище. Если в локальном хранилище нет пользователя, 
пользователь перенаправляется на страницу индекса. Затем он извлекает идентификатор пользователя из локального хранилища, устанавливает BASE_URL на локальный хост,
и объявляет две функции: «fetchData» для отправки GET-запросов и «postData» для отправки POST-запросов к API. 
Функция «logOut» очищает локальное хранилище и перенаправляет пользователя на индексную страницу. 
Функция «loadUsersData» извлекает данные из API, фильтрует их, чтобы исключить текущего пользователя,
и заполняет список пользователей пользовательскими данными, полученными из API. 
Две функции «followUser» и «unfollowUser» создают объект полезной нагрузки, отправляют запрос POST в API, 
чтобы подписаться на пользователя или отписаться от него, и обновить список пользователей, вызвав «loadUsersData».
Сценарий завершается вызовом «loadUsersData» для заполнения списка пользователей при загрузке.

--------------------------------------------------------------------------------------------------

Schemas

Этот скрипт экспортирует две схемы Mongoose: «ProjectUserSchema» и «ProjectPostSchema». Mongoose — это библиотека сопоставления документов объектов MongoDB (ODM) для Node.js.

«ProjectUserSchema» — это схема создания документа в коллекции MongoDB, представляющего пользователя в проекте. Он определяет поля для полного имени пользователя, логина, пароля,
об авторе и список авторов, на которых подписаны.

«ProjectPostSchema» — это схема создания документа в коллекции MongoDB, представляющего запись в проекте. Он определяет поля для автора поста, 
заголовка поста, даты создания, количества лайков и данных поста.

Когда этот сценарий импортируется и используется в другом файле,
эти две схемы можно использовать для взаимодействия с соответствующими коллекциями MongoDB и выполнения таких операций, как создание, чтение, обновление и удаление документов.